syntax = "proto3";

message Message {
        oneof type {
                Proposal proposal = 1;
                NewView newview = 2;
                Vote vote = 3;
                Sync sync = 4;
                SyncRequest syncreq = 5;
        }
}

message SyncRequest {
        Header from = 1;
        // zero limit sends all
        uint64 limit = 2;
        uint64 id = 3;
}

// Proposal carries header and data of the new proposal and certificate of the parent.
message Proposal {
        Header header = 1;
        bytes data = 2;
        bytes sig = 3;
        Certificate parentCert = 4;
        // any time view change happens by timeout - there must be a timeout certificate
        // used to sync replicas on the same block
        TimeoutCertificate timeout = 5;
}

message NewView {
        uint64 view = 1;
        uint64 voter = 2;
        bytes sig = 3;
        Certificate cert = 4;
}

// Block will be used mostly for synchronization of the replicas that lag behind.
message Block {
        Header header = 1;
        bytes data = 2;
        Certificate cert = 3;
}

message Header {
        uint64 view = 1;
        bytes parent = 2;
        uint64 parentView = 3;
        bytes dataRoot = 4;
        bytes stateRoot = 5;
}

// Vote should be naturally aggregated into the certificate.
message Vote {
        bytes block = 1;
        uint64 view = 2;
        uint64 voter = 3;
        bytes sig = 4;
}

message Certificate {
        bytes block = 1;
        AggregatedSignature Sig = 2; // TODO will be replaced with single aggregated signature
}

message TimeoutCertificate {
        uint64 view = 1;
        AggregatedSignature Sig = 2;
}

message AggregatedSignature {
        repeated uint64 voters = 1;
        bytes sig = 2;
}

message Data {
        repeated Transaction data = 1;
}

message Transaction {
        bytes account = 1;
        uint64 nonce = 2;
        bytes data = 3;
        bytes sig = 4;
}

message Sync {
        repeated Block blocks = 1;
}
